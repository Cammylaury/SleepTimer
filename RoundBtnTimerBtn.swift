//
//  RoundBtnTimerBtn.swift
//  Timer!
//
//  Created by Cameron Laury on 8/20/17.
//  Copyright Â© 2017 com.CamGlam.Timer-. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RoundBtnTimerBtn : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawWakeUpBtn(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 90, height: 90), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 90, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 90, y: resizedFrame.height / 90)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 90, resizedFrame.height / 90)


        //// Color Declarations
        let innerShadowColor = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)
        let color = UIColor(red: 0.367, green: 0.221, blue: 0.000, alpha: 1.000)
        let gradient2Color = UIColor(red: 1.000, green: 0.621, blue: 0.000, alpha: 1.000)

        //// Gradient Declarations
        let orangeGradient = CGGradient(colorsSpace: nil, colors: [gradient2Color.cgColor, gradient2Color.blended(withFraction: 0.5, of: color).cgColor, color.cgColor] as CFArray, locations: [0, 0.65, 1])!

        //// Shadow Declarations
        let btnShadow = NSShadow()
        btnShadow.shadowColor = innerShadowColor
        btnShadow.shadowOffset = CGSize(width: 0, height: 0)
        btnShadow.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 80, height: 80))
        context.saveGState()
        context.setShadow(offset: CGSize(width: btnShadow.shadowOffset.width * resizedShadowScale, height: btnShadow.shadowOffset.height * resizedShadowScale), blur: btnShadow.shadowBlurRadius * resizedShadowScale, color: (btnShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        ovalPath.addClip()
        context.drawLinearGradient(orangeGradient, start: CGPoint(x: 45, y: 5), end: CGPoint(x: 45, y: 85), options: [])
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 90, height: 90), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 90, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 90, y: resizedFrame.height / 90)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 90, resizedFrame.height / 90)


        //// Color Declarations
        let sleepBtnBlue = UIColor(red: 0.137, green: 0.337, blue: 0.510, alpha: 1.000)
        let blueBtnGradient = UIColor(red: 0.011, green: 0.066, blue: 0.212, alpha: 1.000)
        let innerShadowColor = UIColor(red: 0.240, green: 0.240, blue: 0.240, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [sleepBtnBlue.cgColor, sleepBtnBlue.blended(withFraction: 0.5, of: blueBtnGradient).cgColor, blueBtnGradient.cgColor] as CFArray, locations: [0, 0.69, 1])!

        //// Shadow Declarations
        let btnShadow = NSShadow()
        btnShadow.shadowColor = innerShadowColor
        btnShadow.shadowOffset = CGSize(width: 0, height: 0)
        btnShadow.shadowBlurRadius = 5

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 80, height: 80))
        context.saveGState()
        context.setShadow(offset: CGSize(width: btnShadow.shadowOffset.width * resizedShadowScale, height: btnShadow.shadowOffset.height * resizedShadowScale), blur: btnShadow.shadowBlurRadius * resizedShadowScale, color: (btnShadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        ovalPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 45, y: 5), end: CGPoint(x: 45, y: 85), options: [])
        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(RoundBtnTimerBtnResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
